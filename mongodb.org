#+TITLE: Example Queries over JSON Documents with MongoDB using MQL

MongoDB is a document store for [[https://en.wikipedia.org/wiki/JSON][JSON]] documents.


* Listing collections and connecting to a database
** Connect to a database
#+begin_src mongo :mydb
use mydb;
#+end_src
** Show what collections exit
#+begin_src mongo :db mydb :exports both
show collections;
#+end_src

#+RESULTS:
: inventory

* Inserting and Updating JSON Documents

- documents are organized into *collections*. Each document has a unique =_id= field that can be specified by the user or if not provided is automatically generated by MongoDB.

** Inserting documents

- https://docs.mongodb.com/manual/tutorial/insert-documents/

When inserting a document you explicitly specify the collection it should belong to. The example shown below inserts a new JSON document into collection =inventory=.

#+begin_src mongo :db mydb :exports both
db.inventory.insertOne(
   { item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } }
)
#+end_src

#+RESULTS:
#+begin_example
{
	"acknowledged" : true,
	"insertedId" : ObjectId("615e444928bd018d33cd3e9c")
}
#+end_example


You can also insert multiple documents at once like this:

#+begin_src mongo :db mydb :exports both
db.inventory.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], size: { h: 14, w: 21, uom: "cm" } },
   { item: "mat", qty: 85, tags: ["gray"], size: { h: 27.9, w: 35.5, uom: "cm" } },
   { item: "mousepad", qty: 25, tags: ["gel", "blue"], size: { h: 19, w: 22.85, uom: "cm" } }
])
#+end_src

#+RESULTS:
#+begin_example
{
	"acknowledged" : true,
	"insertedIds" : [
		ObjectId("615e44923e942e791a25424c"),
		ObjectId("615e44923e942e791a25424d"),
		ObjectId("615e44923e942e791a25424e")
	]
}
#+end_example




* Queries with MQL

Queries are constructed by chaining method calls starting from a collection accessed by =db.COLLECTION=.

** Search for documents

Documents are filtering using =find= which takes as parameter a pattern to be matched against the document. The empty pattern ={}= matches all documents.

#+begin_src mongo :db mydb :exports both
db.inventory.find( {} )
#+end_src

#+RESULTS:
#+begin_example
{ "_id" : ObjectId("615e444928bd018d33cd3e9c"), "item" : "canvas", "qty" : 100, "tags" : [ "cotton" ], "size" : { "h" : 28, "w" : 35.5, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424c"), "item" : "journal", "qty" : 25, "tags" : [ "blank", "red" ], "size" : { "h" : 14, "w" : 21, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424d"), "item" : "mat", "qty" : 85, "tags" : [ "gray" ], "size" : { "h" : 27.9, "w" : 35.5, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424e"), "item" : "mousepad", "qty" : 25, "tags" : [ "gel", "blue" ], "size" : { "h" : 19, "w" : 22.85, "uom" : "cm" } }
#+end_example

If the document provided has elements than only documents containing such elements are returned.

#+begin_src mongo :db mydb :exports both
db.inventory.find( { item: "journal" } )
#+end_src

#+RESULTS:
: { "_id" : ObjectId("615e44923e942e791a25424c"), "item" : "journal", "qty" : 25, "tags" : [ "blank", "red" ], "size" : { "h" : 14, "w" : 21, "uom" : "cm" } }

It is also possible to compare numeric values using inequalities, e.g., =$gt= for greater than:

#+begin_src mongo :db mydb :exports both
db.inventory.find( { qty: { $gt: 30 } } )
#+end_src

#+RESULTS:
#+begin_example
{ "_id" : ObjectId("615e444928bd018d33cd3e9c"), "item" : "canvas", "qty" : 100, "tags" : [ "cotton" ], "size" : { "h" : 28, "w" : 35.5, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424d"), "item" : "mat", "qty" : 85, "tags" : [ "gray" ], "size" : { "h" : 27.9, "w" : 35.5, "uom" : "cm" } }
#+end_example


Disjunctive conditions are supported through the =$or= construct.

#+begin_src mongo :db mydb :exports both
db.inventory.find( { $or: [ { item: "canvas" }, { item: "mat" } ] } )
#+end_src

#+RESULTS:
#+begin_example
{ "_id" : ObjectId("615e444928bd018d33cd3e9c"), "item" : "canvas", "qty" : 100, "tags" : [ "cotton" ], "size" : { "h" : 28, "w" : 35.5, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424d"), "item" : "mat", "qty" : 85, "tags" : [ "gray" ], "size" : { "h" : 27.9, "w" : 35.5, "uom" : "cm" } }
#+end_example

For arrays it is possible to check for existence of an element in the array that matches a pattern (see [[https://docs.mongodb.com/manual/tutorial/query-arrays/][query arrays]])

#+begin_src mongo :db mydb :exports both
db.inventory.find( { tags: "red" } )
#+end_src

#+RESULTS:
: { "_id" : ObjectId("615e44923e942e791a25424c"), "item" : "journal", "qty" : 25, "tags" : [ "blank", "red" ], "size" : { "h" : 14, "w" : 21, "uom" : "cm" } }


** projection

Find also allows a projection to be specified either by stating what fields should be returned or what fields should not be returned.

#+begin_src mongo :db mydb :exports both
db.inventory.find( {}, { "item": 1, "tags": 1 }  )
#+end_src

#+RESULTS:
#+begin_example
{ "_id" : ObjectId("615e444928bd018d33cd3e9c"), "item" : "canvas", "tags" : [ "cotton" ] }
{ "_id" : ObjectId("615e44923e942e791a25424c"), "item" : "journal", "tags" : [ "blank", "red" ] }
{ "_id" : ObjectId("615e44923e942e791a25424d"), "item" : "mat", "tags" : [ "gray" ] }
{ "_id" : ObjectId("615e44923e942e791a25424e"), "item" : "mousepad", "tags" : [ "gel", "blue" ] }
#+end_example

#+begin_src mongo :db mydb :exports both
db.inventory.find( {}, { "size": 0 }  )
#+end_src

#+RESULTS:
#+begin_example
{ "_id" : ObjectId("615e444928bd018d33cd3e9c"), "item" : "canvas", "qty" : 100, "tags" : [ "cotton" ] }
{ "_id" : ObjectId("615e44923e942e791a25424c"), "item" : "journal", "qty" : 25, "tags" : [ "blank", "red" ] }
{ "_id" : ObjectId("615e44923e942e791a25424d"), "item" : "mat", "qty" : 85, "tags" : [ "gray" ] }
{ "_id" : ObjectId("615e44923e942e791a25424e"), "item" : "mousepad", "qty" : 25, "tags" : [ "gel", "blue" ] }
#+end_example



** Limiting the number of results

#+begin_src mongo :db mydb :exports both
db.inventory.find().limit(2)
#+end_src

#+RESULTS:
#+begin_example
{ "_id" : ObjectId("615e444928bd018d33cd3e9c"), "item" : "canvas", "qty" : 100, "tags" : [ "cotton" ], "size" : { "h" : 28, "w" : 35.5, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424c"), "item" : "journal", "qty" : 25, "tags" : [ "blank", "red" ], "size" : { "h" : 14, "w" : 21, "uom" : "cm" } }
#+end_example

** Sorting results

By calling =sort= on a collection, we can sort the documents in the collection on some field in ascending order (=1=) or descending order (=-1=).

#+begin_src mongo :db mydb :exports both
db.inventory.find( {} ).sort( {qty:1} )
#+end_src

#+RESULTS:
#+begin_example
{ "_id" : ObjectId("615e44923e942e791a25424c"), "item" : "journal", "qty" : 25, "tags" : [ "blank", "red" ], "size" : { "h" : 14, "w" : 21, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424e"), "item" : "mousepad", "qty" : 25, "tags" : [ "gel", "blue" ], "size" : { "h" : 19, "w" : 22.85, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424d"), "item" : "mat", "qty" : 85, "tags" : [ "gray" ], "size" : { "h" : 27.9, "w" : 35.5, "uom" : "cm" } }
{ "_id" : ObjectId("615e444928bd018d33cd3e9c"), "item" : "canvas", "qty" : 100, "tags" : [ "cotton" ], "size" : { "h" : 28, "w" : 35.5, "uom" : "cm" } }
#+end_example

#+begin_src mongo :db mydb :exports both
db.inventory.find( {} ).sort( {qty:-1} )
#+end_src

#+RESULTS:
#+begin_example
{ "_id" : ObjectId("615e444928bd018d33cd3e9c"), "item" : "canvas", "qty" : 100, "tags" : [ "cotton" ], "size" : { "h" : 28, "w" : 35.5, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424d"), "item" : "mat", "qty" : 85, "tags" : [ "gray" ], "size" : { "h" : 27.9, "w" : 35.5, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424c"), "item" : "journal", "qty" : 25, "tags" : [ "blank", "red" ], "size" : { "h" : 14, "w" : 21, "uom" : "cm" } }
{ "_id" : ObjectId("615e44923e942e791a25424e"), "item" : "mousepad", "qty" : 25, "tags" : [ "gel", "blue" ], "size" : { "h" : 19, "w" : 22.85, "uom" : "cm" } }
#+end_example


** Removing duplicates

- finding the set of distinct values in a field for all elements in a collection.

#+begin_src mongo :db mydb :exports both
db.inventory.distinct("qty")
#+end_src

#+RESULTS:
: [ 25, 85, 100 ]

** Count documents in a collection
#+begin_src mongo :db mydb :exports both
db.inventory.count()
#+end_src

#+RESULTS:
: 4


#+begin_src mongo :db mydb :exports both
db.inventory.find( { qty: { $gt: 25 } } ).count()
#+end_src

#+RESULTS:
: 2

** Group-by aggregation (The "Aggregation Pipeline")

Group-by aggregation is preceeded by a filter operation is supported using =aggregate= which takes as input an array with two elements:
- =$match= defines a filter condition, the input collection is filtered based on this condition before grouping
- =$group= defines what field to group on (=_id=) and what aggregation function to apply to which field

#+begin_src mongo :db mydb :exports both
db.inventory.aggregate([
    { $match: { qty: { $lt: 100 } } },
    { $group: { _id: "$qty", total: { $sum: "$qty" }, ag: { $avg: "$qty" } } }
    ])
#+end_src

#+RESULTS:
#+begin_example
{ "_id" : 25, "total" : 50, "ag" : 25 }
{ "_id" : 85, "total" : 85, "ag" : 85 }
#+end_example
